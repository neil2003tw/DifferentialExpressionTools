merged$Special.Notes
as.character(merged$Special.Notes)
special_notes<-as.character(merged$Special.Notes)
grep("^Fiscal year end",special_notes)
special_notes[grep("^Fiscal year end",special_notes)]
special_notes<-special_notes[grep("^Fiscal year end",special_notes)]
strsplit('Fiscal year end: ',special_notes)
strsplit(special_notes,'Fiscal year end: ')
sapply(strsplit(special_notes,'Fiscal year end: '),'[[')[2]
sapply(strsplit(special_notes,'Fiscal year end: '),'[['[2])
sapply(strsplit(special_notes,'Fiscal year end: '),'[[')
?'[['
sapply(strsplit(special_notes,'Fiscal year end: '),function(x) '[['[2])
sapply(strsplit(special_notes,'Fiscal year end: '),function(x) '[['[1])
sapply(strsplit(special_notes,'Fiscal year end: '),function(x) [[x]][2])
sapply(strsplit(special_notes,'Fiscal year end: ')
)
gsub('Fiscal year end: ','',special_notes)
special_notes<-gsub('Fiscal year end: ','',special_notes)
strsplit(' ',special_notes)
strsplit(special_notes,' ')
strsplit(special_notes,' ')[1]
strsplit(special_notes,' ')[1][1]
strsplit(special_notes,' ')[[1]]
strsplit(special_notes,' ')[[1]][1]
sapply(strsplit(special_notes,' '),'[[')
sapply(strsplit(special_notes,' '),FUN = '[[')
sapply(strsplit(special_notes,' '),print)
temp<-strsplit(special_notes,' ')
sapply(temp,'[[')
sapply(temp,print)
special_notes
grep('^June',special_notes)
sum(grep('^June',special_notes))
length(grep('^June',special_notes))
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
substr(sampleTimes,0,4)
year<-substr(sampleTimes,0,4)
sampleTimes
class(sampleTimes)
?Date
?weekdays
weekdays(sampleTimes)
weekdays(sampleTimes)=='Monday'
year=='2012'
year[year=='2012']
weekdays(sampleTimes[year=='2012'])
weekdays(sampleTimes[year=='2012'])=='Monday'
sum(weekdays(sampleTimes[year=='2012'])=='Monday')
special_notes
strsplit(special_notes,' ')
sapply(strsplit(special_notes,' '),function(x){x[1]})
?gsub
str_t
library(stringr)
str_trim(special_notes)
data(spam)
library(krenlab)
library(kernlab)
install.packages('kernlab')
library
library
library(kernlab)
data(spam)
30*.75
70*.47
x*.75+(1-x)*.47=30
x*.75+(1-x)*.47=30
0.47-0.28*x=0.3
x<-read.csv('../DifferentialExpressionTools/Random2/profiled_A1.pro')
head(x)
x<-read.table('../DifferentialExpressionTools/Random2/profiled_A1.pro',sep='\t')
head(x)
sum(x[,6])
str(x)
sum(as.numeric(x[,6]))
read.csv('../DifferentialExpressionTools/count_table_merged.csv')
library(DESeq)
read.csv('../DifferentialExpressionTools/RealDataset/final.csv')
str(x)
x<-read.csv('../DifferentialExpressionTools/count_table_merged.csv')
mean(x[,-1])
head(x)
colMeans(x)
colMeans(x[,-1])
hist(x[,2])
hist(x[,2],40)
hist(log(x[,2]),40)
hist(log(x[,3]),40)
require(ggplot2)
states = c("alabama","arizona","arkansas","california",
"colorado","connecticut","delaware","district of columbia",
"florida","georgia","idaho","illinois",
"indiana","iowa","kansas","kentucky",
"louisiana","maine","maryland","massachusetts",
"michigan","minnesota","mississippi","missouri",
"montana","nebraska","nevada","new hampshire",
"new jersey","new mexico","new york","north carolina",
"north dakota","ohio","oklahoma","oregon",
"pennsylvania","rhode island","south carolina","south dakota",
"tennessee","texas","utah","vermont",
"virginia","washington","west virginia","wisconsin",
"wyoming")
dataset <- data.frame(region=states,val=runif(49, 0,1))
us_state_map <- map_data('state')
map_data <- merge(us_state_map, dataset, by='region', all=T)
map_data <- map_data[order(map_data$order), ]
(qplot(long, lat, data=map_data, geom="polygon", group=group, fill=val)
+ theme_bw() + labs(x="", y="", fill="")
+ scale_fill_gradient(low='#EEEEEE', high='darkgreen')
+ theme(title="I was created using gplot2!",
legend.position="bottom", legend.direction="horizontal"))
head(map_data)
rm(list=la())
rm(list=ls())
library(ggplot2)
map_data()
?map_data()
map_data('state')
map('state')
map('us')
map('usa')
map('france')
map('world')
map('world2')
map.axes()
map.cities()
data(worldMapEnv)
worldMapEnv
data(world.cities)
head(world.cities)
world.cities=='Taiwan'
world.cities[world.cities=='Taiwan']
world.cities[world.cities[,2]=='Taiwan',]
map(world2,regions = 'asia')
map(world,regions = 'asia')
map('world2',regions = 'asia')
world2map<-map_data('world2')
head(world2map)
world2map[[region]]=='Taiwan'
world2map[['region']]=='Taiwan'
world2map[world2map[['region']]=='Taiwan',]
world2map[world2map[['region']]=='China',]
head(world2map)
world2map[world2map[['region']]=='Vatican',]
world2map[world2map[['region']]=='Italy',]
world2map[world2map[['region']]=='Hong kong',]
world2map[world2map[['region']]=='China',]
world2map[world2map[['sub region']]=='Taiwan',]
taiwanmap<-world2map[world2map[['subregion']]=='Taiwan',]
ggplot(taiwanmap)<-geom_polygon()
ggplot(taiwanmap)+geom_polygon()
ggplot(taiwanmap)+geom_polygon(aes(x=long, y=lat, group = group),colour="white", fill="grey10" ))
ggplot(taiwanmap)+geom_polygon(aes(x=long, y=lat, group = group),colour="white", fill="grey10" )
read.table('/Users/NeilWu/Dropbox/Friends/小貓.txt')
read.table('/Users/NeilWu/Dropbox/Friends/小貓.txt',fill = F)
read.table('/Users/NeilWu/Dropbox/Friends/小貓.txt',sep='')
read.table('/Users/NeilWu/Dropbox/Friends/小貓.txt',sep='     TT')
read.table('/Users/NeilWu/Dropbox/Friends/小貓.txt')
0.96^25
library(slidify)
library(devtools)
install_github('slidifyLibraries','ramnathv')
library(slidifyLibraries)
install.packages("rPython", repos = "http://www.datanalytics.com/R")
install.packages("rPython")
?sqrt
21^0.5
1/20
21^0.05
1.21^0.05
1.01^20
6.8*(5^0.5)
6.8/(5^0.5)
dir()
getwd()
grep('.*1024',dir())
dir_list<-dir()
dir_list[grep('.*1024',dir_list]
dir_list[grep('.*1024',dir_list)]
dir_list<-dir_list[grep('.*1024',dir_list)]
dir_list
?apply
HIV<-c(12.0,10.5,13.5,12.5,9.5,6.3,7.2)
mean(HIV)
median(H)
median(HIV)
sd(HIV)
read.table('../../Dropbox/NTU HW/Data Mining/D')
read.table('../../Dropbox/NTU HW/Data Mining/Homework3- libSVM/DM-HW3/income',sep=',')
income<-read.table('../../Dropbox/NTU HW/Data Mining/Homework3- libSVM/DM-HW3/income',sep=',')
str(income)
class(income$V15)
levels(income$V2)
levels(income[,2])
class(income[,2])
apply(income,2,function(x) class(x))
apply(income,2,function(x) class(get(x)))
apply(income,2,function(x) class(x))
lapply(income,function(x) class(x))
lapply(income,class)
lapply(income,function(x) if(class(x)=='factor){print(names(x))})
)
)
)
)
lapply(income,function(x) if(class(x)=='factor'){print(names(x))} )
lapply(income,function(x) if(class(x)=='factor'){print(colnames(x))} )
sapply(income,class)
sapply(income,class)=='factor'
head(income[,sapply(income,class)=='factor'])
str(income)
levels(income$V14)
levels(income$V15)
levels(income$V15)<-c('<=50K','<=50K','>50K','>50K')
levels(income$V15)
head(as.numeric(income[,sapply(income,class)=='factor']))
as.numeric(income[,sapply(income,class)=='factor'])
for(i in sapply(income,class)=='factor']){}
for(i in sapply(income,class)=='factor'){print(i)}
sapply(income,class)=='factor')
sapply(income,class)=='factor'
if(sapply(income,class)=='factor')
{print('dick')}
as.numeric(income[,sapply(income,class)=='factor'])
lapply(income[,sapply(income,class)=='factor'],as.numeric)
income[,sapply(income,class)=='factor']<-lapply(income[,sapply(income,class)=='factor'],as.numeric)
head(income)
a<-\
a<-/
a<- /
a<-
b
str(income)
factor(income$V15)
for(i in seq(1,length(income)))
{}
length(income)
paste0('1:',income[,1])
for(i in seq(1,length(income))){
income[,i]<-paste0(i,':',income[,i])
}
head(income)
write.table(income,'income_sorted',sep=' ',quote = F)
write.table(income,'income_sorted',sep=' ',quote = F,col.names = F)
library(qvalue)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
train<-createDataPartition(segmentationOriginal,p=0.6)
head(segmentationOriginal)
train<-createDataPartition(segmentationOriginal$Class,p=0.6)
head(train)
train<-createDataPartition(segmentationOriginal$Class,p=0.6,list = F)
head(train)
trainset<-segmentationOriginal[train,]
testset<-segmentationOriginal[-train,]
fit<-train(Class~.,mathod='rcart',data=trainset)
test<-data.frame(TotalIntench2=c(23000,50000,57000,0),FiberWidthCh1=c(10,10,8,8),VarIntenCh4=c(0,100,100,100),PerimStatusCh1=c(2,0,0,2))
predict(fit,test)
fit
predict(fit,newdata = test)
print(fit$finalModel)
fit<-train(Class~.,mathod='rpart',data=trainset)
print(fit$finalModel)
str(fit)
library(rattle)
fancyRpartPlot(fit$finalModel)
predict(fit,newdata = testset)
print(fit$finalModel)
fit<-train(Class~.,method='rpart',data=trainset)
print(fit$finalModel)
fancyRpartPlot(fit$finalModel)
predict(fit,newdata = test)
source('~/.active-rstudio-document', echo=TRUE)
setwd('../DifferentialExpressionTools/R scripts/Comparison/')
source('~/Github/DifferentialExpressionTools/R scripts/Comparison/Comparison.R', echo=TRUE)
DE_based_matrix55<-DE_based_matrix
generalmatrix55<-generalmatrix
source('~/.active-rstudio-document', echo=TRUE)
DE_based_matrix44<-DE_based_matrix
generalmatrix44<-generalmatrix
source('~/.active-rstudio-document', echo=TRUE)
View(generalmatrix)
DE_based_matrix33<-DE_based_matrix
generalmatrix33<-generalmatrix
source('~/.active-rstudio-document', echo=TRUE)
generalmatrix22<-generalmatrix
DE_based_matrix22<-DE_based_matrix
source('~/.active-rstudio-document', echo=TRUE)
output_edgeR<-edgeR_pile(count_table,normal = 1,control = 1)
output_baySeq<-baySeq_pipe(count_table,normal = 1,control = 1)
output_DEGseq<-DEGseq_pipe(count_table,normal = 1,control = 1)
##data cleaning
output_DESeq<-output_DESeq[order(output_DESeq$pval,decreasing = F),]
output_edgeR<-output_edgeR$table[order(output_edgeR$table$PValue,decreasing = F),]
sig_DEGseq<-output_DEGseq[ output_DEGseq$p.value<0.05 & !is.na(output_DEGseq$p.value) , ]
sig_DEseq<-output_DESeq[ output_DESeq$pval<0.05, ]
sig_edgeR<-output_edgeR[ output_edgeR$PValue<0.05, ]
AnswerDE<-AnswerDE[!is.na(AnswerDE$DE),]
levels(AnswerDE$DE)<-c('highDE','highDE','lowDE','lowDE','midDE','midDE','unDE')
##Set summarise matrix
generalmatrix<-matrix(nrow = 4,ncol = 4)
rownames(generalmatrix)<-c('Sensitivity','Specificity','Precision','Accuracy')
colnames(generalmatrix)<-c('DEGseq','DESeq','edgeR','limma')
matrix_filledin<-function(matrix,row,TP,FP,CP=CP,CN=CN){
matrix[1,row]<-TP/CP
matrix[2,row]<-(CN-FP)/CN
matrix[3,row]<-TP/(TP+FP)
matrix[4,row]<-(TP+(CN-FP))/(CP+CN)
return(matrix)
}
CP<-length(AnswerDE$gene_name[ as.numeric(AnswerDE$DE)!=4 ] )
CN<-length(AnswerDE$gene_name[ as.numeric(AnswerDE$DE)==4 ] )
DEGTP<-sum(sig_DEGseq$GeneNames %in% AnswerDE$gene_name[ as.numeric(AnswerDE$DE)!=4 ])
DEGFP<-sum(sig_DEGseq$GeneNames %in% AnswerDE$gene_name[ as.numeric(AnswerDE$DE)==4 ])
generalmatrix<-matrix_filledin(generalmatrix,1,DEGTP,DEGFP,CP,CN)
DETP<-sum(sig_DEseq$id %in% AnswerDE$gene_name[ as.numeric(AnswerDE$DE)!=4 ])
DEFP<-sum(sig_DEseq$id %in% AnswerDE$gene_name[ as.numeric(AnswerDE$DE)==4 ])
generalmatrix<-matrix_filledin(generalmatrix,2,DETP,DEFP,CP,CN)
edgeTP<-sum(row.names(sig_edgeR) %in% AnswerDE$gene_name[ as.numeric(AnswerDE$DE)!=4 ])
edgeFP<-sum(row.names(sig_edgeR) %in% AnswerDE$gene_name[ as.numeric(AnswerDE$DE)==4 ])
generalmatrix<-matrix_filledin(generalmatrix,3,edgeTP,edgeFP,CP,CN)
limmaTP<-sum(row.names(sig_limma) %in% AnswerDE$gene_name[ as.numeric(AnswerDE$DE)!=4 ])
limmaFP<-sum(row.names(sig_limma) %in% AnswerDE$gene_name[ as.numeric(AnswerDE$DE)==4 ])
generalmatrix<-matrix_filledin(generalmatrix,4,limmaTP,limmaFP,CP,CN)
savetohere(generalmatrix,'summary_all.txt')
rm(list=ls(pattern = '[PN]$'))
##check find out ratio of different type of DE
DE_based_matrix<-matrix(nrow = 3,ncol = 4)
rownames(DE_based_matrix)<-c('highDE','midDE','lowDE')
colnames(DE_based_matrix)<-c('DEGseq','DESeq','edgeR','limma')
DEcase<-c('highDE','midDE','lowDE')
for(i in seq(1,3)){
DE_based_matrix[i,1]<-sum(sig_DEGseq$GeneNames %in% AnswerDE$gene_name[ as.numeric(AnswerDE$DE)==i ])/length(AnswerDE$gene_name[ as.numeric(AnswerDE$DE)==i ])
DE_based_matrix[i,2]<-sum(sig_DEseq$id %in% AnswerDE$gene_name[ as.numeric(AnswerDE$DE)==i ])/length(AnswerDE$gene_name[ as.numeric(AnswerDE$DE)==i ])
DE_based_matrix[i,3]<-sum(row.names(sig_edgeR) %in% AnswerDE$gene_name[ as.numeric(AnswerDE$DE)==i ])/length(AnswerDE$gene_name[ as.numeric(AnswerDE$DE)==i ])
DE_based_matrix[i,4]<-sum(row.names(sig_limma) %in% AnswerDE$gene_name[ as.numeric(AnswerDE$DE)==i ])/length(AnswerDE$gene_name[ as.numeric(AnswerDE$DE)==i ])
}
savetohere(DE_based_matrix,'summary_DEbase.txt')
##Ven diagram
generalmatrix
generalmatrix22
generalmatrix11<-generalmatrix
DE_based_matrix11<-DE_based_matrix
generalmatrix11
generalmatrix11[,4]
generalmatrix11[,4]<-NA
generalmatrix11
DESeq_data<-data.frame(generalmatrix11[,2],generalmatrix22[,2],generalmatrix33[,2],generalmatrix44[,2],
generalmatrix55[,2])
DESeq_data<-data.frame(generalmatrix11[,2],generalmatrix22[,2],generalmatrix33[,2],generalmatrix44[,2],generalmatrix55[,2])
DEGSeq_data<-data.frame(generalmatrix11[,1],generalmatrix22[,1],generalmatrix33[,1],generalmatrix44[,1],generalmatrix55[,1])
edgeR_data<-data.frame(generalmatrix11[,3],generalmatrix22[,3],generalmatrix33[,3],generalmatrix44[,3],generalmatrix55[,3])
limma_data<-data.frame(generalmatrix11[,4],generalmatrix22[,4],generalmatrix33[,4],generalmatrix44[,4],generalmatrix55[,4])
DEGSeq_data
library(reshape2)
generalmatrix<-matrix(nrow = 4,ncol = 4)
colnames(generalmatrix)<-c('Sensitivity','Specificity','Precision','Accuracy')
rownames(generalmatrix)<-c('DEGseq','DESeq','edgeR','limma')
matrix_filledin<-function(matrix,row,TP,FP,CP=CP,CN=CN){
matrix[row,1]<-TP/CP
matrix[row,2]<-(CN-FP)/CN
matrix[row,3]<-TP/(TP+FP)
matrix[row,4]<-(TP+(CN-FP))/(CP+CN)
return(matrix)
}
CP<-length(AnswerDE$gene_name[ as.numeric(AnswerDE$DE)!=4 ] )
CN<-length(AnswerDE$gene_name[ as.numeric(AnswerDE$DE)==4 ] )
DEGTP<-sum(sig_DEGseq$GeneNames %in% AnswerDE$gene_name[ as.numeric(AnswerDE$DE)!=4 ])
DEGFP<-sum(sig_DEGseq$GeneNames %in% AnswerDE$gene_name[ as.numeric(AnswerDE$DE)==4 ])
generalmatrix<-matrix_filledin(generalmatrix,1,DEGTP,DEGFP,CP,CN)
DETP<-sum(sig_DEseq$id %in% AnswerDE$gene_name[ as.numeric(AnswerDE$DE)!=4 ])
DEFP<-sum(sig_DEseq$id %in% AnswerDE$gene_name[ as.numeric(AnswerDE$DE)==4 ])
generalmatrix<-matrix_filledin(generalmatrix,2,DETP,DEFP,CP,CN)
edgeTP<-sum(row.names(sig_edgeR) %in% AnswerDE$gene_name[ as.numeric(AnswerDE$DE)!=4 ])
edgeFP<-sum(row.names(sig_edgeR) %in% AnswerDE$gene_name[ as.numeric(AnswerDE$DE)==4 ])
generalmatrix<-matrix_filledin(generalmatrix,3,edgeTP,edgeFP,CP,CN)
limmaTP<-sum(row.names(sig_limma) %in% AnswerDE$gene_name[ as.numeric(AnswerDE$DE)!=4 ])
limmaFP<-sum(row.names(sig_limma) %in% AnswerDE$gene_name[ as.numeric(AnswerDE$DE)==4 ])
generalmatrix<-matrix_filledin(generalmatrix,4,limmaTP,limmaFP,CP,CN)
View(generalmatrix)
generalmatrix11
t(generalmatrix11)
generalmatrix11<-t(generalmatrix11)
generalmatrix22<-t(generalmatrix22)
generalmatrix33<-t(generalmatrix33)
generalmatrix44<-t(generalmatrix44)
generalmatrix55<-t(generalmatrix55)
t(DESeq_data)
DESeq_data<-t(DESeq_data)
DEGSeq_data<-t(DEGSeq_data)
edgeR_data<-t(edgeR_data)
limma_data<-t(limma_data)
DESeq_data$replicate<-seq(1,5)
tyoe(DESeq_data)
type(DESeq_data)
typeof(DESeq_data)
as.data.frame(DESeq_data)
data.frame(DESeq_data)
DESeq_data
DESeq_data<-data.frame(generalmatrix11[,2],generalmatrix22[,2],generalmatrix33[,2],generalmatrix44[,2],generalmatrix55[,2])
DESeq_data
data.frame(DESeq_data)
DESeq_data<-data.frame(t(DESeq_data))
DESeq_data
edgeR_data
DESeq_data<-data.frame(generalmatrix11[2,],generalmatrix22[2,],generalmatrix33[2,],generalmatrix44[2,],generalmatrix55[2,])
DESeq_data<-data.frame(t(DESeq_data))
DESeq_data
DESeq_data$replicate<-seq(1,5)
DEGSeq_data<-data.frame(DEGSeq_data)
DEGSeq_data
edgeR_data<-data.frame(edgeR_data)
limma_data<-data.frame(limma_data)
DEGSeq_data$replicate<-seq(1,5)
edgeR_data$replicate<-seq(1,5)
limma_data$replicate<-seq(1,5)
DESeq_data$tool<-'DESeq'
DEGSeq_data$tool<-'DEGSeq'
edgeR_data$tool<-'edgeR'
limma_data$tool<-'limma'
rbind(DESeq_data,DEGSeq_data,edgeR_data,limma_data)
Big_general_matrix<-rbind(DESeq_data,DEGSeq_data,edgeR_data,limma_data)
write.table(Big_general_matrix,file = '../../Normal distributed case/Big_table.txt',quote = F,row.names = N,col.names = T)
write.table(Big_general_matrix,file = '../../Normal distributed case/Big_table.txt',quote = F,row.names = F,col.names = T)
library(ggplot)
library(ggplot2)
BGM<-ggplot(Big_general_matrix,aes(x=replicate,colour=factor(tool)))
p1<-BGM+geom_line(aes(y=Sensitivity))+ggtitle('Sensitivity')
p1
colnames(Big_general_matrix)[4]
colnames(Big_general_matrix)[5]
colnames(Big_general_matrix)[5]<-'Replicate count'
Big_general_matrix[,6]
Big_general_matrix[,6]<-factor(Big_general_matrix)
Big_general_matrix[,6]<-factor(Big_general_matrix[,6])
colnames(Big_general_matrix)[6]<-'DEtool'
BGM<-ggplot(Big_general_matrix,aes(x=Replicate count,colour=DEtool)
BGM<-ggplot(Big_general_matrix,aes(x=(Replicate count),colour=DEtool)
colnames(Big_general_matrix)[5]<-'Replicate_count'
BGM<-ggplot(Big_general_matrix,aes(x=Replicate_count,colour=DEtool)
)
p1<-BGM+geom_line(aes(y=Sensitivity))+geom_point(aes(y=Sensitivity))+ggtitle('Sensitivity')
p1
p2<-BGM+geom_line(aes(y=Specificity))+geom_point(aes(y=Specificity))+ggtitle('Specificity')
p3<-BGM+geom_line(aes(y=Precision))+geom_point(aes(y=Precision))+ggtitle('Precision')
p3<-BGM+geom_line(aes(y=Accuracy))+geom_point(aes(y=Accuracy))+ggtitle('Accuracy')
multiplot
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p1,p2,p3,p4,cols=2)
p3<-BGM+geom_line(aes(y=Precision))+geom_point(aes(y=Precision))+ggtitle('Precision')
p4<-BGM+geom_line(aes(y=Accuracy))+geom_point(aes(y=Accuracy))+ggtitle('Accuracy')
multiplot(p1,p2,p3,p4,cols=2)
?ggtitle
DE_based_matrix11
DE_based_matrix22
DE_based_matrix11[,4]<-NA
DE_based_DESeq<-data.frame(t(data.frame(DE_based_matrix11[,2],DE_based_matrix22[,2],DE_based_matrix33[,2],DE_based_matrix44[,2],DE_based_matrix55[,2])))
DE_based_DEGSeq<-data.frame(t(data.frame(DE_based_matrix11[,1],DE_based_matrix22[,1],DE_based_matrix33[,1],DE_based_matrix44[,1],DE_based_matrix55[,1])))
DE_based_edgeR<-data.frame(t(data.frame(DE_based_matrix11[,3],DE_based_matrix22[,3],DE_based_matrix33[,3],DE_based_matrix44[,3],DE_based_matrix55[,3])))
DE_based_limma<-data.frame(t(data.frame(DE_based_matrix11[,4],DE_based_matrix22[,4],DE_based_matrix33[,4],DE_based_matrix44[,4],DE_based_matrix55[,4])))
DE_based_DEGSeq
rbind(DE_based_DEGSeq,DE_based_DESeq,DE_based_edgeR,DE_based_limma)
Big_DE_table<-rbind(DE_based_DEGSeq,DE_based_DESeq,DE_based_edgeR,DE_based_limma)
Big_DE_table$replicate<-seq(1,5)
Big_DE_table
Big_DE_table$replicate<-NA
Big_DE_table$Replicate_count<-seq(1,5)
Big_DE_table$DEtool<-c(rep('DEGseq',5),rep('DESeq',5),rep('edgeR',5),rep('limma',5))
library(shiny)
BDM<-ggplot(Big_DE_table,aes(x=Replicate_count,fill=DEtool))
p1<-BDM+geom_bar(stat = 'identity',aes(y=highDE))
p1
p1<-BDM+geom_bar(stat = 'identity',aes(y=highDE),position=position_dodge())
p1
p2<-BDM+geom_bar(stat = 'identity',aes(y=midDE),position=position_dodge())
p1<-BDM+geom_bar(stat = 'identity',aes(y=highDE),position=position_dodge())+ggtitle('Sensitivity of highDE gene')
p2<-BDM+geom_bar(stat = 'identity',aes(y=midDE),position=position_dodge())+ggtitle('Sensitivity of midDE gene')
p3<-BDM+geom_bar(stat = 'identity',aes(y=lowDE),position=position_dodge())+ggtitle('Sensitivity of lowDE gene')
multiplot(p1,p2,p3)
multiplot(p1,p2,p3,cols = 3)
